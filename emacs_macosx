;; A customized .emacs file for Mac OS X, with el-get installed for
;; package management.

(setq mouse-yank-at-point t)

;; Make default size 85x55 for my big-ass monitor.
(add-to-list 'default-frame-alist '(height . 55))
(add-to-list 'default-frame-alist '(width . 85)) 

;; Keybinding to refresh buffer. http://emacs.stackexchange.com/a/172
(global-set-key (kbd "C-c r") (lambda ()
                                (interactive)
                                (revert-buffer t t t)
                                (message "Refreshed buffer")))

;; https://www.emacswiki.org/emacs/ReformatBuffer
(defun indent-buffer ()
  "Reformat buffer."
  (interactive)
  (save-excursion
    (indent-region (point-min) (point-max) nil)))
(global-set-key (kbd "C-c f") 'indent-buffer)

;; http://stackoverflow.com/a/3669681
(defun show-file-name ()
  "Show the full filepath in the minibuffer."
  (interactive)
  (message (buffer-file-name)))

;; Use octave-mode for MATLAB source code.
(setq auto-mode-alist
      (cons '("\\.m$" . octave-mode)
	    auto-mode-alist))

;; Use shell-script-mode for Dakota input files.
(setq auto-mode-alist
      (cons '("\\.in$" . shell-script-mode)
	    auto-mode-alist))

;; Use json-mode for Jupyter Notebooks.
(setq auto-mode-alist
      (cons '("\\.ipynb$" . json-mode)
	    auto-mode-alist))

;; Use java-mode for SIDL files.
(setq auto-mode-alist
      (cons '("\\.sidl$" . java-mode)
	    auto-mode-alist))

(require 'uniquify)
(setq uniquify-buffer-name-style 'post-forward-angle-brackets)

;; For Mac OS X. Appears to work for app and terminal version.
;; (Keep this before el-get setup?)
(setq default-directory "~/")

;; Use ssh for tramp instead of scp.
(setq tramp-default-method "ssh")

;; Allow mouse click to switch between split screens (alt to `C-x o`).
;; See http://stackoverflow.com/a/6809670/1563298
;; [ May consider disabling, since it doesn't work when ssh-ed across to
;; river or beach. ]
(require 'mouse)
(xterm-mouse-mode t)
(defun track-mouse (e)) 
(setq mouse-sel-mode t)

;; Make meta = command key instead of option key on Mac OS X.
(setq mac-option-key-is-meta nil)
(setq mac-command-key-is-meta t)
(setq mac-command-modifier 'meta)
(setq mac-option-modifier nil)

;; Interactively do things.
(require 'ido)
(ido-mode t)

;; Setup for el-get; see https://github.com/dimitri/el-get.
(add-to-list 'load-path "~/.emacs.d/el-get/el-get")
(unless (require 'el-get nil 'noerror)
  (with-current-buffer
      (url-retrieve-synchronously
       "https://raw.github.com/dimitri/el-get/master/el-get-install.el")
    (goto-char (point-max))
    (eval-print-last-sexp)))
(add-to-list 'el-get-recipe-path "~/.emacs.d/el-get-user/recipes")
(el-get 'sync)

(add-hook 'java-mode-hook (lambda ()	
			    (setq c-basic-offset 2
				  tab-width 2
				  indent-tabs-mode nil)))

;---------------------------------------------------------------------------

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(blink-cursor-mode nil)
 '(column-number-mode t)
 '(html-mode-hook nil))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(default ((t)))
 '(font-lock-builtin-face ((t (:foreground "LightSteelBlue"))))
 '(font-lock-comment-face ((t (:foreground "SteelBlue3"))))
 '(font-lock-constant-face ((t (:foreground "Aquamarine"))))
 '(font-lock-function-name-face ((t (:foreground "LightSkyBlue"))))
 '(font-lock-keyword-face ((t (:foreground "brown2"))))
 '(font-lock-string-face ((t (:foreground "burlywood1"))))
 '(font-lock-type-face ((t (:foreground "PaleGreen"))))
 '(font-lock-variable-name-face ((t (:foreground "LightGoldenrod"))))
 '(isearch ((t (:background "magenta3" :foreground "brown4"))))
 '(link ((t (:foreground "LightBlue3" :underline t))))
 '(link-visited ((t (:inherit link :foreground "violet"))))
 '(minibuffer-prompt ((t (:foreground "cyan"))))
 '(region ((t (:background "color-20")))))
